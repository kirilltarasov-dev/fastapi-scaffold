#!/usr/bin/env python3

import argparse
import os
import subprocess
from pathlib import Path
from textwrap import dedent


def create_file(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content.strip() + "\n")
    print(f"✅ Created {path}")


def init_git(project_path: Path):
    subprocess.run(["git", "init", "-b", "main"], cwd=project_path)
    print("✅ Git initialised (main branch)")


def init_uv(project_path: Path):
    try:
        subprocess.run(
            ["uv", "pip", "install", "--system", "--no-deps"],
            cwd=project_path,
            check=True,
        )
        print("✅ Dependencies installed with uv")
    except subprocess.CalledProcessError as e:
        print(f"⚠️ uv not available or failed, skipping: {e}")


def create_pyproject(deps: list[str], root: Path):
    base = dedent(f"""
        [project]
        name = "fastapi-app"
        version = "0.1.0"
        dependencies = [
            {", ".join(f'"{dep}"' for dep in deps)}
        ]
    """)
    create_file(root / "pyproject.toml", base)


def create_base(project: str, root: Path):
    create_file(
        root / ".gitignore",
        dedent("""
        .venv/
        __pycache__/
        *.pyc
        .env
        uv.lock
        .DS_Store
        .vscode/
    """),
    )

    create_file(root / ".env.example", "PORT=8000")
    create_file(root / "README.md", f"# {project}\n\nGenerated by scaffold.")
    create_file(
        root / "Dockerfile",
        dedent("""
        FROM python:3.11-slim
        WORKDIR /app
        COPY . .
        RUN pip install uv && uv pip install --system --no-deps
        CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    """),
    )
    create_file(
        root / "Dockerfile.dev",
        dedent("""
        FROM python:3.11-slim
        WORKDIR /app
        COPY . .
        RUN pip install uv && uv pip install --system --no-deps
        CMD ["uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
    """),
    )
    create_file(
        root / "docker-compose.yml",
        dedent("""
        version: "3.9"
        services:
          web:
            build:
              context: .
              dockerfile: Dockerfile.dev
            ports:
              - "${PORT:-8000}:8000"
            volumes:
              - .:/app
            env_file:
              - .env
    """),
    )
    create_file(
        root / "Makefile",
        dedent("""
        .PHONY: install run test lint format

        install:
        \tuv pip install --system --no-deps

        run:
        \tuvicorn app.main:app --reload

        test:
        \tpytest tests/

        lint:
        \truff .

        format:
        \tblack .
    """),
    )
    create_file(
        root / "app/main.py",
        dedent("""
        from fastapi import FastAPI

        app = FastAPI()

        @app.get("/")
        def read_root():
            return {"message": "Hello, world!"}
    """),
    )
    create_file(
        root / "tests/test_basic.py",
        dedent("""
        def test_health():
            assert 1 + 1 == 2
    """),
    )


def add_db(root: Path):
    create_file(
        root / "app/db/session.py",
        dedent("""
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker

        DATABASE_URL = "sqlite:///./test.db"

        engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    """),
    )
    create_file(
        root / "app/db/models.py",
        dedent("""
        from sqlalchemy import Column, Integer, String
        from sqlalchemy.ext.declarative import declarative_base

        Base = declarative_base()

        class User(Base):
            __tablename__ = "users"
            id = Column(Integer, primary_key=True, index=True)
            username = Column(String, unique=True, index=True)
    """),
    )


def add_auth(root: Path):
    create_file(
        root / "app/auth/jwt_handler.py",
        dedent("""
        import jwt
        from datetime import datetime, timedelta

        SECRET_KEY = "changeme"

        def create_access_token(user_id: str):
            expire = datetime.utcnow() + timedelta(minutes=30)
            to_encode = {"sub": user_id, "exp": expire}
            return jwt.encode(to_encode, SECRET_KEY, algorithm="HS256")
    """),
    )
    create_file(
        root / "app/auth/dependencies.py",
        dedent("""
        from fastapi import Depends, HTTPException, status
        from fastapi.security import OAuth2PasswordBearer
        import jwt

        oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
        SECRET_KEY = "changeme"

        def get_current_user(token: str = Depends(oauth2_scheme)):
            try:
                payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
                return payload.get("sub")
            except:
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED)
    """),
    )


def add_ci(root: Path):
    create_file(
        root / ".github/workflows/ci.yml",
        dedent("""
        name: CI

        on:
          push:
            branches: [main]
          pull_request:
            branches: [main]

        jobs:
          build:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v3
              - uses: actions/setup-python@v4
                with:
                  python-version: "3.11"
              - name: Install uv and deps
                run: |
                  pip install uv
                  uv pip install --system --no-deps
              - name: Run tests
                run: pytest
    """),
    )


def add_precommit(root: Path):
    create_file(
        root / ".pre-commit-config.yaml",
        dedent("""
        repos:
              - repo: https://github.com/charliermarsh/ruff-pre-commit
            rev: v0.4.4
            hooks:
              - id: ruff
          - repo: https://github.com/psf/black
            rev: 24.3.0
            hooks:
              - id: black
    """),
    )
    create_file(
        root / ".ruff.toml",
        dedent("""
        line-length = 100
        target-version = "py311"
    """),
    )


def main():
    parser = argparse.ArgumentParser(description="Scaffold a modern FastAPI project.")
    parser.add_argument("name", help="Project name")
    parser.add_argument("--with-auth", action="store_true")
    parser.add_argument("--with-db", action="store_true")
    parser.add_argument("--with-ci", action="store_true")
    parser.add_argument("--with-precommit", action="store_true")
    args = parser.parse_args()

    root = Path(args.name)
    root.mkdir(parents=True, exist_ok=True)

    deps = ["fastapi", "uvicorn[standard]"]
    if args.with_db:
        deps.append("sqlalchemy")
    if args.with_auth:
        deps.append("python-jose")
        deps.append("passlib[bcrypt]")
        deps.append("python-multipart")

    create_pyproject(deps, root)
    create_base(args.name, root)

    if args.with_db:
        add_db(root)

    if args.with_auth:
        add_auth(root)

    if args.with_ci:
        add_ci(root)

    if args.with_precommit:
        add_precommit(root)

    init_git(root)
    init_uv(root)


if __name__ == "__main__":
    main()
